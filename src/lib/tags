!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ADDRESS	cpu.c	/^	ADDRESS = 0,  \/* The hexa address (F432)                       *\/$/;"	e	file:
BG_COLOR	cpu.c	/^	BG_COLOR,     \/* The color of the cell background              *\/$/;"	e	file:
BKP	cpu.c	/^} BKP;$/;"	t	file:
BYTES	cpu.c	/^	BYTES,        \/* The bytes that for the instruction (F4 B2 02) *\/$/;"	e	file:
INSTRUCTION	cpu.c	/^	INSTRUCTION,  \/* The instruction (MOV A 42)                    *\/$/;"	e	file:
LONG_ADDRESS	cpu.c	/^	LONG_ADDRESS, \/* The numeric address, for consulting           *\/$/;"	e	file:
N_COLUMNS	cpu.c	/^	N_COLUMNS     \/* The number of columns                         *\/$/;"	e	file:
bp_item_clicked	cpu.c	/^static gboolean bp_item_clicked(GtkWidget *widget, GdkEventButton *event, gpointer data)$/;"	f	file:
breakpoints	cpu.c	/^static GSList* breakpoints;$/;"	v	file:
button_with_stock_image	other.c	/^GtkWidget* button_with_stock_image(gchar* mnemonic, gchar* stock)$/;"	f
connect_callbacks	other.c	/^int connect_callbacks(GModule* mod)$/;"	f
cpu_debugger	cpu.c	/^static GtkWidget *cpu_window, *cpu_debugger, *cpu_reference, *cpu_step, $/;"	v	file:
cpu_debugger_clicked	cpu.c	/^static gboolean cpu_debugger_clicked(GtkWidget *widget, GdkEvent *event)$/;"	f	file:
cpu_loaded	cpu.c	/^static gboolean cpu_loaded = FALSE;$/;"	v	file:
cpu_reference	cpu.c	/^static GtkWidget *cpu_window, *cpu_debugger, *cpu_reference, *cpu_step, $/;"	v	file:
cpu_reference_changed	cpu.c	/^static void cpu_reference_changed(GtkEntry* entry, gpointer data)$/;"	f	file:
cpu_run_pause_clicked	cpu.c	/^static void cpu_run_pause_clicked(GtkButton* cpu_run_pause, gpointer data)$/;"	f	file:
cpu_step	cpu.c	/^static GtkWidget *cpu_window, *cpu_debugger, *cpu_reference, *cpu_step, $/;"	v	file:
cpu_step_clicked	cpu.c	/^static void cpu_step_clicked(GtkButton* cpu_step, gpointer data)$/;"	f	file:
cpu_vblank	cpu.c	/^		 *cpu_vblank;$/;"	v	file:
cpu_window	cpu.c	/^static GtkWidget *cpu_window, *cpu_debugger, *cpu_reference, *cpu_step, $/;"	v	file:
emu_cpu_get_debugger_reference	cpu.c	/^long emu_cpu_get_debugger_reference()$/;"	f
emu_cpu_init	cpu.c	/^int emu_cpu_init(char* filename)$/;"	f
emu_cpu_set_breakpoint	cpu.c	/^void emu_cpu_set_breakpoint(unsigned long int pos, int one_time_only)$/;"	f
emu_cpu_set_debugger_reference	cpu.c	/^void emu_cpu_set_debugger_reference(unsigned long initial_pos)$/;"	f
emu_error	libemu.c	/^void emu_error(char* message)$/;"	f
emu_init	libemu.c	/^void emu_init(int argc, char** argv)$/;"	f
emu_main	libemu.c	/^void emu_main()$/;"	f
emu_mem_get	ram.c	/^unsigned char emu_mem_get(unsigned long int pos)$/;"	f
emu_mem_init	ram.c	/^void emu_mem_init(unsigned long sz)$/;"	f
emu_mem_init_k	ram.c	/^void emu_mem_init_k(unsigned int sz)$/;"	f
emu_mem_set	ram.c	/^void emu_mem_set(unsigned long int pos, unsigned char data)$/;"	f
emu_mem_set_direct	ram.c	/^void emu_mem_set_direct(unsigned long int pos, unsigned char data)$/;"	f
emu_message	libemu.c	/^void emu_message(char* message)$/;"	f
emu_rom_load	rom.c	/^int emu_rom_load(char* filename, long pos)$/;"	f
flags	cpu.c	/^static GtkWidget *registers[255], *flags[255];$/;"	v	file:
hex2long	other.c	/^long hex2long(char* hex)$/;"	f
ip	cpu.c	/^static long int ip, previous_ip;$/;"	v	file:
is_breakpoint	cpu.c	/^static gboolean is_breakpoint(unsigned long int pos, gboolean delete_weak)$/;"	f	file:
num_flags	cpu.c	/^static int num_registers, num_flags;$/;"	v	file:
num_registers	cpu.c	/^static int num_registers, num_flags;$/;"	v	file:
one_time_only	cpu.c	/^	gboolean one_time_only;$/;"	m	file:
pos	cpu.c	/^	unsigned long int pos;$/;"	m	file:
previous_ip	cpu.c	/^static long int ip, previous_ip;$/;"	v	file:
previous_reference	cpu.c	/^static gchar* previous_reference;$/;"	v	file:
ram	ram.c	/^unsigned char* ram;$/;"	v
registers	cpu.c	/^static GtkWidget *registers[255], *flags[255];$/;"	v	file:
run	cpu.c	/^gboolean run()$/;"	f
run_image	cpu.c	/^static GtkWidget *run_image, *run_label;$/;"	v	file:
run_label	cpu.c	/^static GtkWidget *run_image, *run_label;$/;"	v	file:
running	cpu.c	/^static gboolean running = FALSE;$/;"	v	file:
size	ram.c	/^unsigned long size;$/;"	v
store	cpu.c	/^static GtkListStore *store;$/;"	v	file:
update_debugger	cpu.c	/^static void update_debugger(gboolean find_ip)$/;"	f	file:
update_flags_and_registers	cpu.c	/^static void update_flags_and_registers()$/;"	f	file:
